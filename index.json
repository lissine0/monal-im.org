[{"content":"Implemented XEPs XEP Status Since XEP-0004: Data Forms partial 4.9 XEP-0030: Service Discovery complete 4.6 XEP-0045: Multi-User Chat partial 5.0 XEP-0048: Bookmarks complete 5.0 XEP-0054: vcard-temp (implemented only for MUCs) partial XEP-0059: Result Set Management. Used by other XEPs. complete 4.8 XEP-0060: Publish-Subscribe partial 4.9 XEP-0066: Out of Band Data partial 4.9 XEP-0077: In-Band Registration partial XEP-0084: User Avatar complete 4.9 XEP-0085: Chat State Notifications complete 4.7 XEP-0092: Software Version complete XEP-0115: Entity Capabilities complete 4.7 XEP-0153: vCard-Based Avatars (implemented only for MUCs) partial XEP-0162: Best Practices for Roster and Subscription Management complete XEP-0163: Personal Eventing Protocol complete 4.9 XEP-0172: User Nickname complete 4.9 XEP-0184: Message Receipts complete 4.7 XEP-0191: Blocking Command complete 5.0 XEP-0198: Stream Management complete 4.6 XEP-0199: XMPP Ping complete 4.7 XEP-0223: Persistent Storage of Private Data via PubSub complete 4.9 XEP-0237: Roster Versioning complete 4.6 XEP-0245: The /me Command complete 4.9 XEP-0249: Direct MUC Invitations complete 5.0 XEP-0280: Message Carbons complete 4.5 XEP-0286: Mobile Considerations on LTE Networks complete 4.7 XEP-0305: XMPP Quickstart complete 5.1.1 XEP-0308: Last Message Correction complete 4.8 XEP-0313: Message Archive Management complete 4.8 XEP-0319: Last User Interaction in Presence complete 4.7 XEP-0333: Chat Markers (received markers won\u0026#39;t ever be implemented, use XEP-0184 instead) partial 4.8 XEP-0352: Client State Indication complete 4.7 XEP-0357: Push Notifications complete 4.8 XEP-0359: Unique and Stable Stanza IDs complete 4.8 XEP-0363: HTTP File Upload complete 4.9 XEP-0368: SRV records for XMPP over TLS complete 4.6 XEP-0379: Pre-Authenticated Roster Subscription partial 4.9 XEP-0380: Explicit Message Encryption complete 5.1 XEP-0384: OMEMO Encryption (currently only in 1:1 chats, not MUCs) complete 4.8 XEP-0392: Consistent Color Generation complete 5.1 XEP-0410: MUC Self-Ping (Schrödinger\u0026#39;s Chat) complete 5.0 XEP-0423 XMPP Compliance Suites 2020 partial XEP-0441: Message Archive Management Preferences complete 4.8 XEP-0454: OMEMO Media sharing partial 5.0 Planned XEPs XEP Status XEP-0158: CAPTCHA Forms planned XEP-0215: External Service Discovery planned XEP-0353: Jingle Message Initiation planned XEP-0369: Mediated Information eXchange (MIX) planned XEP-0374: OpenPGP for XMPP Instant Messaging planned XEP-0402: PEP Native Bookmarks planned ","permalink":"https://monal-im.github.io/monal-im.org/supportedxeps/","summary":"Implemented XEPs XEP Status Since XEP-0004: Data Forms partial 4.9 XEP-0030: Service Discovery complete 4.6 XEP-0045: Multi-User Chat partial 5.0 XEP-0048: Bookmarks complete 5.0 XEP-0054: vcard-temp (implemented only for MUCs) partial XEP-0059: Result Set Management. Used by other XEPs. complete 4.8 XEP-0060: Publish-Subscribe partial 4.9 XEP-0066: Out of Band Data partial 4.9 XEP-0077: In-Band Registration partial XEP-0084: User Avatar complete 4.9 XEP-0085: Chat State Notifications complete 4.7 XEP-0092: Software Version complete XEP-0115: Entity Capabilities complete 4.","title":"Supported XEPs"},{"content":" Monal MUC: monal@chat.yax.im Github Tickets: https://github.com/monal-im/Monal/issues Email: info[at]monal[minus]im[dot]org. Reporting a Vulnerability It is highly appreciated reporting a vulnerability to the Monal developers. We ask you for disclosure until it has been fixed. This prevents abuse and exploitation in the current published releases. Please report issues directly to info[at]monal[minus]im[dot]org.\nPlease try to report\nin detail what you are concerned about if applicable, how to reproduce your contact details, if the sending email is not enough. That way we can ask questions back to you. You are also invited to make a recommendation on how to fix a potential security vulnerability.\nOnce a vulnerability has been announced and indicated we try our very best to provide a fix as soon as possible, at its best within days. However, dependent on the potential issue it can take longer if many code sections need to be changed.\nPlease be reminded that this is a non-commercial software project.\nThank you for considering reporting a security vulnerability. This improves the quality of the app significantly.\n","permalink":"https://monal-im.github.io/monal-im.org/support/","summary":"Monal MUC: monal@chat.yax.im Github Tickets: https://github.com/monal-im/Monal/issues Email: info[at]monal[minus]im[dot]org. Reporting a Vulnerability It is highly appreciated reporting a vulnerability to the Monal developers. We ask you for disclosure until it has been fixed. This prevents abuse and exploitation in the current published releases. Please report issues directly to info[at]monal[minus]im[dot]org.\nPlease try to report\nin detail what you are concerned about if applicable, how to reproduce your contact details, if the sending email is not enough.","title":"Support"},{"content":"Monal is developed by volunteers and community collaboration. The work which has been done is usually not paid, and the developers ask for donations to keep up service costs and development in the future! Please consider giving a little back for the hard work which has been conducted. Currently, there are three ways for financial support of the Monal development:\nDonate via GitHub Sponsors Donate via Libera Pay EU citizens can donate via SEPA, too. Just contact Thilo Molitor via mail to thilo@monal-im.org to get his IBAN. Here you can read about further support of the development!\nFind general information in the Monal Wiki.\nTranslations We host and manage translations via Weblate.\n","permalink":"https://monal-im.github.io/monal-im.org/donate/","summary":"Monal is developed by volunteers and community collaboration. The work which has been done is usually not paid, and the developers ask for donations to keep up service costs and development in the future! Please consider giving a little back for the hard work which has been conducted. Currently, there are three ways for financial support of the Monal development:\nDonate via GitHub Sponsors Donate via Libera Pay EU citizens can donate via SEPA, too.","title":"Donate"},{"content":" iOS macOS macOS (homebrew) Stable App Store App Store Beta Testflight Testflight brew install \u0026ndash;cask monal Alpha upon request to info@monal-im.org brew tap monal-im/homebrew-monal-alpha\nbrew install \u0026ndash;cask monal-alpha Release cycle ","permalink":"https://monal-im.github.io/monal-im.org/install/","summary":" iOS macOS macOS (homebrew) Stable App Store App Store Beta Testflight Testflight brew install \u0026ndash;cask monal Alpha upon request to info@monal-im.org brew tap monal-im/homebrew-monal-alpha\nbrew install \u0026ndash;cask monal-alpha Release cycle ","title":"Install"},{"content":"Monal-im.org (Website) A user’s IP address will be logged in the HTTP server logs. All server logs are purged every two weeks and there isn’t any way for us to associate this information with any particular individual.\nMonal (App) With Monal 5.2.0 we introduce an even more privacy-friendly push system. Please check your Monal version before continuing reading.\nHow to find out your Monal version\nOpen Monal Open up the settings menu in the upper left corner (gearwheel) Scroll down to the last entry \u0026ldquo;version\u0026rdquo; Monal (App ≥ 5.2.0) App Resources are very limited on iOS and macOS. Monal for example can only run a limited time in the background after a user either locked the screen or switched the app. Hence, apps can not simply keep a connection to your xmpp server open 24/7 to inform you about new messages. To overcome these limitations your XMPP-Server can can request our push server to send push messages to Apple. With these push messages we can request Apple to wake up the app on your phone. Once it is woken up it has about 30 seconds to connect to your XMPP server, fetch all new messages and show a push notification for these new messages.\nHow push works Every time that Monal logins at your XMPP servers, it requests your server to inform us once your received an XMPP message while Monal was closed. We therefore requests a Monal specific push token from Apple. Using this Monal specific push token our push server can send push messages via Apples push system to wake up the app on your device.\nOnce push messages are enabled for your Monal instance on your XMPP servers, your XMPP servers will open a encrypted server to server (s2s) connection to one of our push servers. Using this s2s connection your XMPP servers will then request our push servers to wake up Monal every time that new messages should be processed. To wake up your instance your XMPP servers send us:\nyour unique Monal specific push token that was generated by Apple the domain of the XMPP server that you are using. Push We never see your messages. We do not know who you are chatting with. We could only ever track what XMPP domains a push token is/was using. We can not identify a user. Push-Servers We provide two independent push server regions at the moment: Europe and US. By default, each device will choose our Europe based push region unless the device local is set to the US.\nHow to change the push region Open Monal Open up the settings menu in the upper left corner (gearwheel) Open the Notifications menu Scroll down Select a region Push server regions If you are an XMPP server administrator, and you restricted s2s connections, please allow s2s to all our regions.\nRegion Hostname Notice Europe eu.prod.push.monal-im.org US us.prod.push.monal-im.org Push server locations Name Region Hoster Location Notice s1.eu.prod.push.monal-im.org Europe Hetzner Finland s2.eu.prod.push.monal-im.org Europe PHP-Friends Germany s1.us.prod.push.monal-im.org US Fosshost US IPv4 only s2.us.prod.push.monal-im.org US Fosshost US Crash reports and app usage Monal does track crashes and usage data anonymously using the tools provided by Apple. This is opt-in only and controlled by iOS and macOS global settings. If a user decides not to send any data to developers, no crash logs are sent to Monal developers.\nLogs Your local device will contain a log file with all sent and received raw XMPP messages as well as debug logs. It does contain sensitive personal data! This file will never be transferred to us, except if you explicitly (manually) send it to us (e.g. via mail).\nGDPR Subject Access Requests (SAR) European GDPR allows users to request a copy of all data retained about them. Starting with Monal 5.2.0 we no longer see your JIDs (username@domain.tld) in our push servers. We therefore are not able to send you retained data related to your JID. We furthermore are unable to provide your retained data related to your unique push token because we have no way to verify that Apple issued you a provided device ID. If you have questions regarding GDPR, please send us a mail to info@monal-im.org.\nMonal (App \u0026lt; 5.2.0) Monal for iOS and macOS will register for APNS push notifications via a server to server (s2s) connection from your XMPP server to our push server. Your XMPP JID alongside with a push identifier and secret token from Apple, that is only valid for this app, will be saved and logged in the push-server logs. We do not intend to track you. All server logs are purged every two weeks. Our logs allow us to see the following details:\nYour JID (including your server’s hostname) Time when you register for push notifications Your apple push node and push token that was generated for Monal by Apple Time when your XMPP server triggered a push notification to your Monal device To fulfill its duty, our push server has to hold some information associated with an Apple push token, until Apple marks the token a deleted, which usually means you have uninstalled the app (Info: Apple confirms if a token is still valid on every push). In detail these information consists of:\nThe Apple push token The timestamp of the last push error The timestamp of the last successful push The timestamp of the registration of your device with Monal’s push-server The timestamp when the registration was renewed A random UUID identifying your device A random secret used by your XMPP server to authenticate a push Push server locations Name Hoster Location Notice ios13push.monal.im AWS US Provided by Anurodh Pokharel\nIPv4 only push.monal.im AWS US Provided by Anurodh Pokharel\nIPv4 only\niOS 12 only Crash reports and app usage Monal does track crashes and usage data anonymously using the tools provided by Apple. This is opt-in only and controlled by iOS and macOS global settings. If a user decides not to send any data to developers, no crash logs are sent to Monal developers.\nLogs Your local device will contain a log file with all sent and received raw XMPP messages as well as debug logs. It does contain sensitive personal data! This file will never be transferred to us, except if you explicitly (manually) send it to us (e.g. via mail).\nGDPR Subject Access Requests (SAR) European GDPR allows users to request a copy of all data retained about them. Please send GDPR requests to info@monal-im.org. As by GDPR we need to validate your JID before answering to your inquiry. Therefore, we will provide you a JID you must send a confirmation to, before we can answer your request and send you all retained data related to your JID.\n","permalink":"https://monal-im.github.io/monal-im.org/privacy/","summary":"Monal-im.org (Website) A user’s IP address will be logged in the HTTP server logs. All server logs are purged every two weeks and there isn’t any way for us to associate this information with any particular individual.\nMonal (App) With Monal 5.2.0 we introduce an even more privacy-friendly push system. Please check your Monal version before continuing reading.\nHow to find out your Monal version\nOpen Monal Open up the settings menu in the upper left corner (gearwheel) Scroll down to the last entry \u0026ldquo;version\u0026rdquo; Monal (App ≥ 5.","title":"Privacy"},{"content":" TLDR:\nInfo: Monal will stop support for iOS 12, iOS 13 and macOS Catalina!\nWe are searching for a SwiftUI developer.\nWe need a new simplified website.\nWith better continuous funding, our push servers will move from the US to Europe.\nWe have a new support mail: info@monal-im.org\nTwo years ago we decided to rewrite the Monal app almost entirely and improve it gradually in the process, instead of creating another XMPP Client for iOS and macOS. We successfully managed to transform Monal from an app that had flaws and issues with many functions to a level that promotes a user-friendly experience with working features such as push notification, group chat, and partially end-to-end encryption support (OMEMO). If you are selecting an XMPP client for Apple systems we think that Monal is a great choice nowadays. We have been investing more than a thousand hours and worked hard to overcome all the flaws, the legacy app had. We invite you to give the recent beta a try!\nThe development of Monal has not yet finished though, and many more features are hopefully to come. But due to our time constraints, it sometimes takes a bit longer than we and the community would like. We are at most two developers at the moment using our spare time to maintain Monal and develop new features. As we are developing Monal in our spare time without decent funding, it is sometimes hard to prioritize specific features. Please give this circumstance some credits.\nWhat should Monal look like in the future? To give you a bit of insight knowledge of our plans we tried to summarize the most important tasks.\nInterface (SwiftUI) In the future Monal should be easy to use. Therefore, the interface requires a proper rework and while we are at it, it should be ported to SwiftUI. While we are still improving in designing with SwiftUI, we would be glad if there is a SwiftUI \u0026amp; Open Source enthusiast who would like to help us with this.\nWith this transition we would like to improve the accessibility of the app as well. If you like to support an open source project, and you would like to be part of our SwiftUI journey please contact us.\nTask:\nAdd new MUC creation and management UI Port the chat view Finish contact Details List group chat (MUC) participants Display OMEMO encryption fingerprints for verification Port our settings Port all other remaining views Qualifications:\nGeneral knowledge around SwiftUI (iOS and Catalyst) Interest in improving a (XMPP) chat client Optional, but preferred: Some experience with XMPP (e.g. some weeks, or maybe months of usage of Monal or any other “modern” XMPP client) Optional: Experience in designing inclusive / accessible UI Website We need a modern (simplified) Hugo based website that is easier to understand, similar to Conversations, Dino or Gajim.\nIf you have some spare time, and you are a skilled in creating websites with Hugo please contact us.\nRequirements:\nSimple design nothing too fancy Privacy by design → No analytics, no external CSS, jss, … usage OMEMO Encryption in Group Chat (MUC) We started to integrate OMEMO for group chats (MUC) into our alpha build. The receiving and sending sides are already implemented, but there are a few more steps until we can release it into the beta.\nSwitching to our new Domain monal-im.org In late 2021 we decided that we would like to have a domain with DNSSEC as our current top level domain does not support it. This domain will mainly be used for our push servers and mail servers in the future. From now on you will be able to reach us via info@monal-im.org.\nBuild server Thanks to ~20 generous donors, we were able to buy a new build server that will be used to build our alpha, beta and stable releases. Furthermore, Thilo is now finally able to debug code with a proper debugger connected to his phone.\nRedundant Push Servers We are currently using an AWS US instance for our push server that is not redundant and failed in 2021 more frequently than we liked it to. For that reason we started an internal project to auto-deploy our push server with Ansible and looked into ways for running a redundant push server setup. The first tests look promising so far, but a few more things need to be sorted out before we can switch over to our new setup.\nBefore we can switch to the new push server setup, we need a stable funding each month. We estimate that renting a VM in Germany and one at a different hoster in Finland would cost us between 16€ to 32€ each month. Without a stable funding we might not be able to afford this new setup and our push servers would stay in the US.\nThanks to our generous build server donors, we have a few bucks left that will be used as a ~5 month buffer in case of fluctuant push server funding\nPrivacy improved push servers With our current push implementation our so-called “app servers” see your JID (username + server), a unique but otherwise opaque device id and an opaque token generated by apple, as well as your interaction times (when you register for push notifications, timestamps when your XMPP server triggers a push notification device).\nIf you use multiple accounts on one device, the unique device id is shared across all accounts. We don’t think that this is ideal, as we know all jid’s a user is using.\nIn the future we want to try to reduce our knowledge by hiding your username from our app servers. If our idea works, we would only see that a device is registered on one or more domains and the timestamps that a push message was triggered from each domain that is used.\nAudio and Video Calls Many clients such as Conversations and Dino support audio and video calls, so Monal should be next 🙂\nEnd-of-life: iOS 12, iOS 13 and macOS Catalina will not be supported anymore Our user group on iOS 12, iOS 13 as well as macOS Catalina has decreased in last years while the resources needed to maintain these old platforms increased. We therefore decided to focus on newer iOS versions and drop the old ones. The next stable release will only be supported on iOS 14 and higher and macOS Big Sur and higher. We are still unsure how long we will support iOS 14, as most of the devices also support iOS15.\nDonations and Support Monal is developed by volunteers and community collaboration. The work which has been done is usually not paid, and the developers need to keep up service costs and development in the future! Please consider giving a bit back for the hard work which has been conducted. Currently, there are three ways to financially support the Monal development:\nDonate via GitHub Sponsors Donate via Libera Pay EU citizens can donate via SEPA, too. Just contact Thilo Molitor via mail to info@monal-im.org to get his IBAN. Here you can read about further support of the development! Find general information in the Monal Wiki.\nTranslations We host and manage translations via Weblate.\nMany thanks! Of course, thank you very much to everyone who supported us in the past two years! 🙂\nYou can follow us via Mastodon.\n","permalink":"https://monal-im.github.io/monal-im.org/post/00001-monal-development/","summary":"TLDR:\nInfo: Monal will stop support for iOS 12, iOS 13 and macOS Catalina!\nWe are searching for a SwiftUI developer.\nWe need a new simplified website.\nWith better continuous funding, our push servers will move from the US to Europe.\nWe have a new support mail: info@monal-im.org\nTwo years ago we decided to rewrite the Monal app almost entirely and improve it gradually in the process, instead of creating another XMPP Client for iOS and macOS.","title":"Insights Into Monal Development"},{"content":"Monal is a XMPP instant messaging client for MacOS and iOS which strives to be the go-to client for these platforms just like the app Conversations IM is for Android. XMPP in general is an open and standardized protocol for real time communication. Anyone can host their own server and communicate freely with each other, just like with email and just like email the used addresses are of the form \u0026ldquo;user@domain.tld\u0026rdquo;. The user can use different apps and services, such as Monal, from a single but also multiple accounts. This serves a decentral and sovereign infrastructure and digital communication on the internet but also offers many potential for innovation. The chat client for iOS and MacOS involves implementing various XEP standards (XMPP extension protocols, adding modern functionality to the XMPP-core and XMPP-im RFCs, see XMPP Extensions).\nDesigned for iOS and Mac Things look and work the way you expect. iOS, iPadOS or macOS, there is a version of Monal for you.\nMonal aims to being developed under a open-source license (BSD license) that severs the user, while not selling or tracking information for external parties (nor for anyone else). This app exists because it is key to ensure usability on all platforms and within the XMPP network with all its positives aspects when it comes to decentral communication and infrastructure.\nFind the development on GitHub!\n","permalink":"https://monal-im.github.io/monal-im.org/home/","summary":"Monal is a XMPP instant messaging client for MacOS and iOS which strives to be the go-to client for these platforms just like the app Conversations IM is for Android. XMPP in general is an open and standardized protocol for real time communication. Anyone can host their own server and communicate freely with each other, just like with email and just like email the used addresses are of the form \u0026ldquo;user@domain.","title":"Monal-IM. Privacy like it's 1999"},{"content":"Imprint Thilo Molitor Vogelsbergstr. 18 68642 Bürstadt Germany\neMail: info[at]monal[minus]im[dot]org\nAbout Monal originates in 2002 as fork of the SworIM app. Until 2019 it has been developed by Anu Pokharel. Since then Thilo Molitor took over the development and joined in 2020 with Friedrich Altheide. From initial rewrite of code in the backend the entire app has been upgraded with a modern XMPP engine, new features and future-proof setup. Monal challenges to be the go-to XMPP chat-app for the iOS and macOS platform.\nMonal Team Thilo Moltor - Since 2015 he is contributing to Monal IM, when he also started to help out with the Gajim XMPP Client written in Python. Shortly after this, in early 2016 I started to take over maintenance for several Prosody modules as well as developing newones (i.e. mod_smacks, mod_cloud_notify, mod_csi_battery_saver). Later on, in 2017 Thilo started to implement basic push support in Monal IM along with the required push-app-server. Significantly core contribution to Monal continued since early 2020.\nRe-implementation of connection management and integration of new XML parser Modern push notifications New XMPP parser completely eliminating some classes of (security relevant) bugs A generalized PEP (XEP-0163) framework which is needed as foundation for the mentioned Bookmark Storage (XEP-0048) and PEP Native Bookmarks (XEP-0402) See commitment after 2021 in the release notes. And of course many people from the XMPP Community! Many thanks for your support in the recent years! If you read this and want to support go to this page!\nPublications Talks Molitor, Thilo. Monal development recap 2019 - 2021 and open discussion Berlin XMPP Meetup, 13th October 2021, Weblink Molitor, Thilo; Altheide, Friedrich. Modern XMPP - A story based on Monal Berlin XMPP Meetup, 13th April 2022, Weblink, Slides XEP publications XEP-0353: Jingle Message Initiation Authors: Philipp Hancke, Peter Saint-Andre, Thilo Molitor This specification provides a way for the initiator of a Jingle session to propose sending an invitation in an XMPP message stanza, thus taking advantage of message delivery semantics instead of sending IQ stanzas to all of the responder\u0026rsquo;s online resources or choosing a particular online resource.\n","permalink":"https://monal-im.github.io/monal-im.org/about/","summary":"Imprint Thilo Molitor Vogelsbergstr. 18 68642 Bürstadt Germany\neMail: info[at]monal[minus]im[dot]org\nAbout Monal originates in 2002 as fork of the SworIM app. Until 2019 it has been developed by Anu Pokharel. Since then Thilo Molitor took over the development and joined in 2020 with Friedrich Altheide. From initial rewrite of code in the backend the entire app has been upgraded with a modern XMPP engine, new features and future-proof setup. Monal challenges to be the go-to XMPP chat-app for the iOS and macOS platform.","title":"About"},{"content":"Monal currently covers the following chat features:\nDecentralised and federated chat standard XMPP Private and group messaging Privacy-respecting push notifications Encrypted private and group chats (state-of-the-art encryption (OMEMO)) Message history Free selection of your XMPP account provider Voice messaging Message archiving Upload of files, videos and images (HTTP Upload) Many settings and a design to offer privacy settings in the app to the need of the user A detailed and technical listing of your supported features (so called XMPP Extensions) can be found in our DOAP file. Planned features: Audio and Video calls User-interface overhaul Implemented XEPs XEP Status Since XEP-0004: Data Forms partial 4.9 XEP-0030: Service Discovery complete 4.6 XEP-0045: Multi-User Chat partial 5.0 XEP-0048: Bookmarks complete 5.0 XEP-0054: vcard-temp (implemented only for MUCs) partial XEP-0059: Result Set Management. Used by other XEPs. complete 4.8 XEP-0060: Publish-Subscribe partial 4.9 XEP-0066: Out of Band Data partial 4.9 XEP-0077: In-Band Registration partial XEP-0084: User Avatar complete 4.9 XEP-0085: Chat State Notifications complete 4.7 XEP-0092: Software Version complete XEP-0115: Entity Capabilities complete 4.7 XEP-0153: vCard-Based Avatars (implemented only for MUCs) partial XEP-0162: Best Practices for Roster and Subscription Management complete XEP-0163: Personal Eventing Protocol complete 4.9 XEP-0172: User Nickname complete 4.9 XEP-0184: Message Receipts complete 4.7 XEP-0191: Blocking Command complete 5.0 XEP-0198: Stream Management complete 4.6 XEP-0199: XMPP Ping complete 4.7 XEP-0223: Persistent Storage of Private Data via PubSub complete 4.9 XEP-0237: Roster Versioning complete 4.6 XEP-0245: The /me Command complete 4.9 XEP-0249: Direct MUC Invitations complete 5.0 XEP-0280: Message Carbons complete 4.5 XEP-0286: Mobile Considerations on LTE Networks complete 4.7 XEP-0305: XMPP Quickstart complete 5.1.1 XEP-0308: Last Message Correction complete 4.8 XEP-0313: Message Archive Management complete 4.8 XEP-0319: Last User Interaction in Presence complete 4.7 XEP-0333: Chat Markers (received markers won\u0026#39;t ever be implemented, use XEP-0184 instead) partial 4.8 XEP-0352: Client State Indication complete 4.7 XEP-0357: Push Notifications complete 4.8 XEP-0359: Unique and Stable Stanza IDs complete 4.8 XEP-0363: HTTP File Upload complete 4.9 XEP-0368: SRV records for XMPP over TLS complete 4.6 XEP-0379: Pre-Authenticated Roster Subscription partial 4.9 XEP-0380: Explicit Message Encryption complete 5.1 XEP-0384: OMEMO Encryption (currently only in 1:1 chats, not MUCs) complete 4.8 XEP-0392: Consistent Color Generation complete 5.1 XEP-0410: MUC Self-Ping (Schrödinger\u0026#39;s Chat) complete 5.0 XEP-0423 XMPP Compliance Suites 2020 partial XEP-0441: Message Archive Management Preferences complete 4.8 XEP-0454: OMEMO Media sharing partial 5.0 Planned XEPs XEP Status XEP-0158: CAPTCHA Forms planned XEP-0215: External Service Discovery planned XEP-0353: Jingle Message Initiation planned XEP-0369: Mediated Information eXchange (MIX) planned XEP-0374: OpenPGP for XMPP Instant Messaging planned XEP-0402: PEP Native Bookmarks planned ","permalink":"https://monal-im.github.io/monal-im.org/features/","summary":"Monal currently covers the following chat features:\nDecentralised and federated chat standard XMPP Private and group messaging Privacy-respecting push notifications Encrypted private and group chats (state-of-the-art encryption (OMEMO)) Message history Free selection of your XMPP account provider Voice messaging Message archiving Upload of files, videos and images (HTTP Upload) Many settings and a design to offer privacy settings in the app to the need of the user A detailed and technical listing of your supported features (so called XMPP Extensions) can be found in our DOAP file.","title":"Features"}]